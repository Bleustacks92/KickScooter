// #INDEX# ======================================================================================================
// Title .........: BLDC - Управление двигателем.
// Arch ..........: GD32F130C8C6, GD32F130C6C6
// Author ........: GreenBytes ( https://vk.com/greenbytes )
// Version .......: 3.5.0.0
// ==============================================================================================================

#ifndef BLDC_H

    #define BLDC_H

    #include "gd32f1x0.h"
    #include "../framework/board/board.h"
    #include "../framework/framework.h"
    #include "../device/device.h"
    #include "../config/config.h"

    /* # Константы # */

    # define ENGINE_CONTROL_PWM                                     0x00
    # define ENGINE_CONTROL_CURRENT                                 0x01
    # define ENGINE_CONTROL_TURN                                    0x02

    # define ENGINE_PWM_SIN                                      	0x00
    # define ENGINE_PWM_MEANDER                                     0x01

    # define ENGINE_HALL_120                                        0x00
    # define ENGINE_HALL_60                                         0x01

    # define ENGINE_FORWARD                                         0x00
    # define ENGINE_BACKWARD                                        0x01

    /* # Структуры # */

    /* Структура управления таймерами (фазами) */
    typedef struct {
        /* Управление по фазе А */
        int A;
        /* Управление по фазе B */
        int B;
        /* Управление по фазе C */
        int C;
        /* Номер таймера по фазе А */
		uint32_t TIMER_A;
        /* Номер таймера по фазе B */
		uint32_t TIMER_B;
        /* Номер таймера по фазе C */
		uint32_t TIMER_C;
	} mosfet_t;

    /* Структура положения ротора */
    typedef struct {
        /* Эл. угол положение ротора */
        uint16_t degree;
	} hall_t;

    /* Структура расчетов */
    typedef struct {
        /* Временное храние положение ротора для вызова события при изменении */
		hall_t      hall;
        /* Кол-во отсчет за единицу дискретизации холлов */
        uint32_t    tick;
        /* Запись предыдущего кол-ва отсчетов */
        uint32_t    count;
        /* Значние для суммирования одноного отсчета */
        uint32_t    step;
        /* Общее значения суммирования */
        uint32_t    line;
        /* Положение ротора */
        uint16_t    degree;
        /* Устанавливает направления вращения */
        uint8_t     reverse;
	} degree_t;

    /* Структура с настройками */
    typedef struct {
        /* Включение / отключения тактирования двигателя */
        uint8_t     enable;
        /* Установка силы торможения в А */
        uint16_t     brake; 
        /* Автоматическая установка угла ослабления поля */
        int16_t     fw;
        /* Адрес таблицы для тактирования фаз */
		const int8_t   *tablePtr;
	} driver_t;

    /* Структура расчета оборотов ротора */
    typedef struct {
        /* Время в micros() */
        uint64_t time;
        /* Выходные расчеты об/мин */
        uint32_t turnover;
        /* Достижение лимита */
        uint32_t limit;
		/* Мотор в движении */
		uint32_t run;
		/* */
		uint8_t  runs;
	} speed_t;

    /* Структура уровней управления */
    typedef struct {
		/* */
		uint32_t	time;
        /* Кол-во отсчетов */
        uint32_t    tick;
        /* Входное не фильтрованное значение */
        int16_t     input;
        /* Уровень фильтрации */
        int16_t     pwm;
        /* Выходное значение */
        int16_t     output;
	} input_t;

    /* Структура управления двигателем */
	typedef struct {
        mosfet_t    mosfet;
        degree_t    degree;
        driver_t    driver;
        input_t     input;
        speed_t     speed;
        hall_t      hall;
	} engine_t;


    /* # Описание процедур # */

    // #BLDC# -----------------------------------------------------
	// Description....: Инициализация
	// Argument.......: Нет
	// ------------------------------------------------------------
    void engine_init(void);

    // #BLDC# -----------------------------------------------------
	// Description....: Установка таймеров номерам фаз
	// Argument.......: 
    //      uint32_t timeA      = Таймер тактирования фазы А
    //      uint32_t timeB      = Таймер тактирования фазы B
    //      uint32_t timeC      = Таймер тактирования фазы C
	// ------------------------------------------------------------
    void engineMosfetPhase(uint32_t timeA, uint32_t timeB, uint32_t timeC);

    // #BLDC# -----------------------------------------------------
	// Description....: Установка варианта фазировки
	// Argument.......: 
    //      uint8_t setTable    = Номер выбора фаз (0-5)
	// ------------------------------------------------------------
    void enginePhase(uint8_t setTable);

    // #BLDC# -----------------------------------------------------
	// Description....: Установка таблицы холлов
	// Argument.......: 
    //      uint8_t setHall     = Выбор таблицы холлов _
    //          ENGINE_HALL_120 = Холлы 120 градусов
    //          ENGINE_HALL_60  = Холлы 60 градусов
	// ------------------------------------------------------------
    void engineHall(uint8_t setHall);

    // #BLDC# -----------------------------------------------------
	// Description....: Установка таблицы работы фаз
	// Argument.......: 
    //      uint8_t setTable    = Выбор таблицы тактирования фаз _
    //       ENGINE_PWM_MEANDER = Тактирование мендром
    //       ENGINE_PWM_SIN     = Тактирование синусом
    //       ENGINE_PWM_SINMOD  = Тактирование модифицированным синусом
	// ------------------------------------------------------------
    void engineTable(uint8_t setTable);

    // #BLDC# -----------------------------------------------------
	// Description....: Установка типом управления двигателем
	// Argument.......: 
    //      uint8_t setControl  = Выбор типом управления _
    //  ENGINE_CONTROL_PWM      = Управление напрямую
    //  ENGINE_CONTROL_VOLTAGE  = Управление напряжением
    //  ENGINE_CONTROL_CURRENT  = Управление током
    //  ENGINE_CONTROL_TURN     = Управление оборотами
	// ------------------------------------------------------------
    void engineControl(uint8_t setControl);

    // #BLDC# -----------------------------------------------------
	// Description....: Включение / Отключение двигателя
	// Argument.......: 
    //      uint8_t setEnable   = Управление _
    //              TRUE        = Включение двигателя
    //              FALSE       = Отключение двигателя
	// ------------------------------------------------------------
    void engineEnable(uint8_t setEnable);

    void engineDirection(uint8_t setDirection);
	
	uint8_t engineRun(void);
	
	uint8_t engineTick(void);

    // #BLDC# -----------------------------------------------------
	// Description....: Установка задания (учитывается выбранный тип управления двигателя)
	// Argument.......: 
    //      int16_t ewPWM       = сигнал управления взависимости выбора управления в процедуре engineControl()
	//      uint8_t target      = Использование конверации
    // ------------------------------------------------------------
    void engineWrite(uint16_t ewPWM, uint8_t target);

    // #BLDC# -----------------------------------------------------
	// Description....: Управление силой торможения (в попугаях от 0 - 100)
	// Argument.......: 
    //      int16_t ewPWM       = Управление силы торможения (0-100)
	// ------------------------------------------------------------
    void engineBrake(uint16_t ewPWM, uint8_t target);

    // #BLDC# -----------------------------------------------------
	// Description....: Получить кол-во оборотов двигателя в мин
	// Argument.......: Нет
	// ------------------------------------------------------------
    uint16_t engineTurnover(void);

    // #BLDC# -----------------------------------------------------
	// Description....: Получить текущее направление двигателя
	// Argument.......: Нет
	// ------------------------------------------------------------
    uint8_t engineReverse(void);

    // #BLDC# -----------------------------------------------------
	// Description....: Получить интеполяцию эл. угла двигателя
	// Argument.......: Нет
	// ------------------------------------------------------------
    uint16_t engineDegree(void);

    // #BLDC# -----------------------------------------------------
	// Description....: Получить сигнал с фазы
	// Argument.......: 
    //      uint32_t id         = Таймер фазы
	// ------------------------------------------------------------
    int32_t engineMosfet(uint32_t id);

    // #BLDC# -----------------------------------------------------
	// Description....: Получить текущий уровень подачи PWM
	// Argument.......: Нет
	// ------------------------------------------------------------
    int16_t engineCurrentPWM(void);

    // #BLDC# -----------------------------------------------------
	// Description....: Расчет сигналов с датчиков холла
	// Argument.......: Нет
	// ------------------------------------------------------------
    void engineEncoder(void);

    // #BLDC# -----------------------------------------------------
	// Description....: Расчет входных данных с учетом установленных параметров
	// Argument.......: 
    //      uint16_t pwmAnalog      = Входные данные
	// ------------------------------------------------------------
    uint16_t engineTarget(uint16_t pwmAnalog);

    // #BLDC# -----------------------------------------------------
	// Description....: Расчет оборотов в секунду
	// Argument.......: Нет
	// ------------------------------------------------------------
    void engineTurn(void);

    // #BLDC# -----------------------------------------------------
	// Description....: Расчет интерполяции
	// Argument.......: Нет
	// ------------------------------------------------------------
    void engineInterpolation(void);

    // #BLDC# -----------------------------------------------------
	// Description....: Дешифрование угла таблицы
	// Argument.......: 
    //      int16_t idegress    = Эл. угол
	// ------------------------------------------------------------
    int8_t engineEncodeTable(int16_t idegress);

    // #BLDC# -----------------------------------------------------
	// Description....: Расчет движения по таблице
	// Argument.......: Нет
	// ------------------------------------------------------------
    void engineMosfetTable(void);

    // #BLDC# -----------------------------------------------------
	// Description....: Основная процедура работы с двигателем
	// Argument.......: Нет
	// ------------------------------------------------------------
    void enginePWM(void);

    // #BLDC# -----------------------------------------------------
	// Description....: Уровень 1 - Задание предела максимального управления
	// Argument.......: Нет
	// ------------------------------------------------------------
    void engineWriteTimer(void);

    // #BLDC# -----------------------------------------------------
	// Description....: Событие управления PWM таймером
	// Argument.......: Нет
	// ------------------------------------------------------------
    void engineEventPWM(void);

    // #BLDC# -----------------------------------------------------
	// Description....: Событие управления TIMER13
	// Argument.......: Нет
	// ------------------------------------------------------------
    void engineEventTimer(void);

#endif
